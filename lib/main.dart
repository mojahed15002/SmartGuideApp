import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:flutter_map/flutter_map.dart' as fm;
import 'package:latlong2/latlong.dart' as latlng;
import 'package:url_launcher/url_launcher.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:smooth_page_indicator/smooth_page_indicator.dart';

void main() {
  runApp(const SmartGuideApp());
}

class SmartGuideApp extends StatelessWidget {
  const SmartGuideApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Smart City Guide',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(primarySwatch: Colors.orange, fontFamily: "Roboto"),
      home: const WelcomePage(),
    );
  }
}

//
// ุตูุญุฉ 1: ุงูุชุฑุญูุจ
//
class WelcomePage extends StatelessWidget {
  const WelcomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              " ูุฑุญุจุงู ุจู ูู ูุฑุดุฏู ุงูุณูุงุญู ุงูุฎุงุต๐",
              style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                padding: const EdgeInsets.symmetric(
                  horizontal: 40,
                  vertical: 15,
                ),
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const ChoicePage()),
                );
              },
              child: const Text("ุงูุทูู๐"),
            ),
          ],
        ),
      ),
    );
  }
}

//
// ุตูุญุฉ 2: ุงูุจุญุซ ุฃู "ุฃูู ุฃูุงุ"
//
class ChoicePage extends StatefulWidget {
  const ChoicePage({super.key});

  @override
  State<ChoicePage> createState() => _ChoicePageState();
}

class _ChoicePageState extends State<ChoicePage> {
  final Map<String, Widget Function()> placePages = {
    "ุดุงุฑุน ุงูุฃูุงุฏูููุฉ": () => const AcademyStreetPage(),
    "ุดุงุฑุน ุณููุงู": () => const SofianStreetPage(),
    "ุดุงุฑุน ููุตู": () => const FaisalStreetPage(),
    "ุฏูุงุฑ ุงูุดูุฏุงุก": () => const MartyrsRoundaboutPage(),
  };

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("ุงุฎุชูุงุฑ ุงููููุน")),
      backgroundColor: Colors.white,
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Autocomplete<String>(
              optionsBuilder: (TextEditingValue textEditingValue) {
                if (textEditingValue.text.isEmpty) {
                  return const Iterable<String>.empty();
                }
                return placePages.keys.where((String option) {
                  return option.contains(textEditingValue.text);
                });
              },
              onSelected: (String selection) {
                final pageBuilder = placePages[selection];
                if (pageBuilder != null) {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => pageBuilder()),
                  );
                }
              },
              fieldViewBuilder:
                  (context, controller, focusNode, onEditingComplete) {
                return TextField(
                  controller: controller,
                  focusNode: focusNode,
                  onEditingComplete: onEditingComplete,
                  decoration: const InputDecoration(
                    hintText: "ุงุจุญุซ ุนู ุงูููุทูุฉ...",
                    border: OutlineInputBorder(),
                    suffixIcon: Icon(Icons.search, color: Colors.orange),
                  ),
                );
              },
            ),
            const SizedBox(height: 30),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                padding: const EdgeInsets.symmetric(
                  horizontal: 40,
                  vertical: 15,
                ),
              ),
              onPressed: () async {
                Position position = await _determinePosition();
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => MapPage(position: position),
                  ),
                );
              },
              child: const Text("ุฃูู ุฃูุงุ ๐"),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                padding: const EdgeInsets.symmetric(
                  horizontal: 40,
                  vertical: 15,
                ),
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const GeneralInfoPage(),
                  ),
                );
              },
              child: const Text("ุนุฑุถ ุฌููุน ุงููุฏู ๐๏ธ"),
            ),
          ],
        ),
      ),
    );
  }

  Future<Position> _determinePosition() async {
    bool serviceEnabled;
    LocationPermission permission;

    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      await Geolocator.openLocationSettings();
      throw Exception("ุฎุฏูุฉ ุงููููุน ุบูุฑ ููุนูุฉ");
    }

    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        throw Exception("ุชู ุฑูุถ ุฅุฐู ุงููููุน");
      }
    }

    if (permission == LocationPermission.deniedForever) {
      throw Exception("ุชู ุฑูุถ ุฅุฐู ุงููููุน ุจุดูู ุฏุงุฆู");
    }

    return await Geolocator.getCurrentPosition();
  }
}

//
// ุตูุญุงุช ุงูุฃูุงูู ุงููุฑุฏูุฉ
//
class AcademyStreetPage extends StatelessWidget {
  const AcademyStreetPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const InfoPage(
      title: "ุดุงุฑุน ุงูุฃูุงุฏูููุฉ",
      description: '''ุณูููู "ุดุงุฑุน ุงูุฃูุงุฏูููุฉ" ูุณุจุฉู ุฅูู ุฃูุงุฏูููุฉ ุงููุฌุงุญ ุงููุทููุฉ (ุฌุงูุนุฉ ุงููุฌุงุญ ุงููุทููุฉ โ ุงูุญุฑู ุงูุฌุฏูุฏ) ุงูุชู ุชูุน ุจูุญุงุฐุงุชู. ุงูุทุงุจุน ุงูุนุงู: - ุดุงุฑุน ุญููู ุฎุตูุตูุง ูู ุฃููุงุช ุงูุฏูุงู ุงูุฌุงูุนู. - ูุญุชูู ุนูู ุนุฏุฏ ูุจูุฑ ูู ุงููุทุงุนู ูุงูููุงูู ุงูุชู ุชุฎุฏู ุงูุทูุจุฉ. - ุชูุชุดุฑ ููู ุงูููุชุจุงุชุ ูุฑุงูุฒ ุงูุชุตููุฑ ูุงูุทุจุงุนุฉุ ููุญูุงุช ุงููุฑุทุงุณูุฉ. - ููุฌุฏ ุฃูุถูุง ูุญูุงุช ููุงุจุณ ูุฃุญุฐูุฉ ููุณุชูุฒูุงุช ูุชููุนุฉ. ''',
      images: [
        "assets/images/academy.jpg",
        "assets/images/academy2.jpg"
      ],
    );
  }
}

class SofianStreetPage extends StatelessWidget {
  const SofianStreetPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const InfoPage(
      title: "ุดุงุฑุน ุณููุงู",
      description: "ุดุงุฑุน ุณููุงู ูุนุชุจุฑ ูู ุงูุดูุงุฑุน ุงูุญูููุฉ ูู ุงููุฏููุฉ ููุดุชูุฑ ุจุงูุฃูุดุทุฉ ุงูุชุงููุฉ: - ูุญูุงุช ุชุฌุงุฑูุฉ ูุชููุนุฉ ุชุดูู ุงูููุงุจุณ ูุงูุฃุญุฐูุฉ. - ููุงูู ููุทุงุนู ุชูุฏู ุฃุทุจุงู ูุญููุฉ ูุนุงูููุฉ. - ูุฑุงูุฒ ุฎุฏูุงุช ูุซู ุตูุฏููุงุช ูููุงุชุจ ุจุฑูุฏ. - ุญุฑูุฉ ูุฑูุฑ ูุดุทุฉ ุฎุตูุตูุง ูู ุณุงุนุงุช ุงูุฐุฑูุฉ. - ูุณูู ุงููุตูู ููู ุฅูู ุงููุฑุงูู ุงูุชุนููููุฉ ูุงูุตุญูุฉ ุงููุฑูุจุฉ.",
      images: ["assets/images/sofian.jpg", "assets/images/sofian2.jpg"],
    );
  }
}

class FaisalStreetPage extends StatelessWidget {
  const FaisalStreetPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const InfoPage(
      title: "ุดุงุฑุน ููุตู",
      description: "ุดุงุฑุน ููุตู ูู ุฃุญุฏ ุงูุดูุงุฑุน ุงูุฑุฆูุณูุฉ ูู ูุฏููุฉ ูุงุจูุณ ููุชููุฒ ุจุงูุชุงูู: - ูุฑุจุท ุจูู ููุงุทู ุงููุฏููุฉ ุงูุญูููุฉ ููุณูู ุงููุตูู ุฅูู ุงูุฃุณูุงู ูุงููุฑุงูุฒ ุงูุชุฌุงุฑูุฉ. - ูุญุชูู ุนูู ูุญูุงุช ุชุฌุงุฑูุฉ ูุชููุนุฉุ ูู ุงูููุงุจุณ ุฅูู ุงูุฅููุชุฑูููุงุช. - ูุฌูุฏ ููุงูู ููุทุงุนู ุดุนุจูุฉ ูุนุงูููุฉ ุชูุงุณุจ ุฌููุน ุงูุฃุฐูุงู. - ุญุฑูุฉ ูุฑูุฑ ูุนุชุฏูุฉ ูุณุจููุง ูุน ููุงูู ุณูุงุฑุงุช ูุชููุฑุฉ ุจุฌุงูุจ ุงูุดุงุฑุน. - ูุฑูุจ ูู ุงููุฏุงุฑุณ ูุงููุฑุงูู ุงูุญููููุฉ ูุงูุฎุฏููุฉุ ููุง ูุฌุนูู ุดุงุฑุนูุง ููููุง ูุณูุงู ูุงุจูุณ.",
      images: ["assets/images/faisal.jpg", "assets/images/faisal2.jpg"],
    );
  }
}

class MartyrsRoundaboutPage extends StatelessWidget {
  const MartyrsRoundaboutPage({super.key});

  @override
  Widget build(BuildContext context) {
    return const InfoPage(
      title: "ุฏูุงุฑ ุงูุดูุฏุงุก",
      description: "ุฏูุงุฑ ุงูุดูุฏุงุก ููุนุชุจุฑ ูู ุงููุนุงูู ุงููุฑูุฒูุฉ ูู ูุฏููุฉ ูุงุจูุณ ููุชููุฒ ุจุงูุชุงูู: - ูุนุฏ ููุทุฉ ุงูุชูุงุก ุฑุฆูุณูุฉ ููุทุฑู ูู ูุณุท ุงููุฏููุฉุ ููุง ูุณูู ุงูุชููู ุจูู ุงูููุงุทู ุงููุฎุชููุฉ. - ูุญุงุท ุจุนุฏุฏ ูู ุงููุญูุงุช ุงูุชุฌุงุฑูุฉ ูุงูููุงูู ูุงููุทุงุนู. - ููุฌุฏ ุจุงููุฑุจ ููู ููุงุชุจ ุญููููุฉ ููุฑุงูู ุนุงูุฉ ูููุฉ. - ูุนุชุจุฑ ููุงููุง ููุชุฌูุนุงุช ูุงูููุงุณุจุงุช ุงููุญููุฉ ุฃุญูุงููุง. - ุงูุญุฑูุฉ ุงููุฑูุฑูุฉ ููู ูุดุทุฉ ุฎูุงู ุงูููุงุฑุ ูุน ูุฌูุฏ ุฅุดุงุฑุงุช ูุฑูุฑ ูุชูุธูู ุงูุณูุฑ.",
      images: ["assets/images/martyrs.jpg", "assets/images/martyrs2.jpg", "assets/images/martyrs3.jpg"],
    );
  }
}

//
// ุตูุญุฉ ุงููุฏู
//
class GeneralInfoPage extends StatelessWidget {
  const GeneralInfoPage({super.key});

  @override
  Widget build(BuildContext context) {
    final cities = ["ูุงุจูุณ", "ุฑุงู ุงููู", "ุฌููู"];

    return Scaffold(
      appBar: AppBar(title: const Text("ุงููุฏู")),
      body: ListView(
        children: cities.map((city) {
          return ListTile(
            title: Text(city),
            trailing: const Icon(Icons.arrow_forward_ios, color: Colors.orange),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (_) => CityPlacesPage(cityName: city),
                ),
              );
            },
          );
        }).toList(),
      ),
    );
  }
}

//
// ุฃูุงูู ุฏุงุฎู ุงููุฏููุฉ
//
class CityPlacesPage extends StatelessWidget {
  final String cityName;

  CityPlacesPage({super.key, required this.cityName});

  final Map<String, List<Map<String, dynamic>>> cityPlacesPages = {
    "ูุงุจูุณ": [
      {
        "title": "ุงูุจูุฏุฉ ุงููุฏููุฉ",
        "page": PlaceDetailsPage(
          title: "ุงูุจูุฏุฉ ุงููุฏููุฉ",
          cityName: "ูุงุจูุณ",
          images: ["assets/images/oldcity.jpg", "assets/images/oldcity2.jpg"],
          url: "https://example.com/oldcity",
        ),
      },
      {
        "title": "ุฌุจู ุฌุฑุฒูู",
        "page": PlaceDetailsPage(
          title: "ุฌุจู ุฌุฑุฒูู",
          cityName: "ูุงุจูุณ",
          images: ["assets/images/gerizim.jpg", "assets/images/gerizim2.jpg"],
          url: "https://example.com/gerizim",
        ),
      },
    ],
    "ุฑุงู ุงููู": [
      {
        "title": "ุฏูุงุฑ ุงูููุงุฑุฉ",
        "page": PlaceDetailsPage(
          title: "ุฏูุงุฑ ุงูููุงุฑุฉ",
          cityName: "ุฑุงู ุงููู",
          images: ["assets/images/manara.jpg", "assets/images/manara2.jpg"],
          url: "https://example.com/manara",
        ),
      },
      {
        "title": "ูุชุญู ูุงุณุฑ ุนุฑูุงุช",
        "page": PlaceDetailsPage(
          title: "ูุชุญู ูุงุณุฑ ุนุฑูุงุช",
          cityName: "ุฑุงู ุงููู",
          images: ["assets/images/arafat.jpg", "assets/images/arafat2.jpg", "assets/images/arafat3.jpg"],
          url: "https://example.com/arafat",
        ),
      },
    ],
    "ุฌููู": [
      {
        "title": "ูููุณุฉ ุจุฑููู",
        "page": PlaceDetailsPage(
          title: "ูููุณุฉ ุจุฑููู",
          cityName: "ุฌููู",
          images: ["assets/images/burqin.jpg", "assets/images/burqin2.jpg"],
          url: "https://example.com/burqin",
        ),
      },
      {
        "title": "ุณูู ูุฑุฌ ุงุจู ุนุงูุฑ",
        "page": PlaceDetailsPage(
          title: "ุณูู ูุฑุฌ ุงุจู ุนุงูุฑ",
          cityName: "ุฌููู",
          images: ["assets/images/marj.jpg", "assets/images/marj2.jpg"],
          url: "https://example.com/marj",
        ),
      },
    ],
  };

  @override
  Widget build(BuildContext context) {
    final places = cityPlacesPages[cityName] ?? [];

    return Scaffold(
      appBar: AppBar(title: Text("ุฃูุงูู ูู $cityName")),
      body: ListView(
        children: places.map((placeData) {
          return ListTile(
            title: Text(placeData["title"]),
            trailing:
                const Icon(Icons.arrow_forward_ios, color: Colors.orange),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (_) => placeData["page"]),
              );
            },
          );
        }).toList(),
      ),
    );
  }
}

//
// ุตูุญุฉ ุงููุนูููุงุช ุงูุนุงูุฉ (Carousel)
//
class InfoPage extends StatelessWidget {
  final String title;
  final String description;
  final List<String> images;

  const InfoPage({
    super.key,
    required this.title,
    required this.description,
    required this.images,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(title)),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: ListView(
          children: [
            Text(description, style: const TextStyle(fontSize: 18)),
            const SizedBox(height: 16),
            CarouselSlider(
              options: CarouselOptions(
                height: kIsWeb ? 360 : 220,
                enlargeCenterPage: true,
                autoPlay: true,
                viewportFraction: 0.9,
              ),
              items: images.map((imgPath) {
                return Image.asset(
                  imgPath,
                  width: double.infinity,
                  fit: kIsWeb ? BoxFit.contain : BoxFit.cover,
                );
              }).toList(),
            ),
            const SizedBox(height: 16),
            Text(description, style: const TextStyle(fontSize: 18)),
          ],
        ),
      ),
    );
  }
}

//
// ุตูุญุฉ ุงูุฎุฑูุทุฉ
//
class MapPage extends StatelessWidget {
  final Position position;

  const MapPage({super.key, required this.position});

  @override
  Widget build(BuildContext context) {
    final userLocation = latlng.LatLng(position.latitude, position.longitude);

    return Scaffold(
      appBar: AppBar(title: const Text("ุงูุช ููุง")),
      body: fm.FlutterMap(
        options: fm.MapOptions(initialCenter: userLocation, initialZoom: 16),
        children: [
          fm.TileLayer(
            urlTemplate:
                "https://api.maptiler.com/maps/streets/{z}/{x}/{y}.png?key=EvrUD11e3k8dXq0KBsyK",
            userAgentPackageName: 'com.example.flutter_application_1',
          ),
          fm.MarkerLayer(
            markers: [
              fm.Marker(
                point: userLocation,
                width: 80,
                height: 80,
                child: const Icon(
                  Icons.location_pin,
                  color: Colors.red,
                  size: 40,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

//
// ุตูุญุฉ ุชูุงุตูู ุงูุฃูุงูู (Carousel)
//
class PlaceDetailsPage extends StatelessWidget {
  final String title;
  final String cityName;
  final List<String> images;
  final String url;

  const PlaceDetailsPage({
    super.key,
    required this.title,
    required this.cityName,
    required this.images,
    required this.url,
  });

  Future<void> _launchURL(String url) async {
    final uri = Uri.parse(url);
    if (!await launchUrl(uri, mode: LaunchMode.externalApplication)) {
      throw Exception("ุชุนุฐุฑ ูุชุญ ุงูุฑุงุจุท: $url");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("ุชูุงุตูู $title")),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: ListView(
          children: [
            Text(
              "$title - $cityName",
              style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            CarouselSlider(
              options: CarouselOptions(
                height: kIsWeb ? 360 : 220,
                enlargeCenterPage: true,
                autoPlay: true,
                viewportFraction: 0.9,
              ),
              items: images.map((imgPath) {
                return Image.asset(
                  imgPath,
                  width: double.infinity,
                  fit: kIsWeb ? BoxFit.contain : BoxFit.cover,
                );
              }).toList(),
            ),
            const SizedBox(height: 16),
            Text(
              "ูุฐุง ูุตู ุงูุชุฑุงุถู ูู $title ูู $cityName. ููููู ุชุนุฏููู ูุงุญููุง.",
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 16),
            InkWell(
              onTap: () => _launchURL(url),
              child: Text(
                url,
                style: const TextStyle(
                  color: Colors.blue,
                  decoration: TextDecoration.underline,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
